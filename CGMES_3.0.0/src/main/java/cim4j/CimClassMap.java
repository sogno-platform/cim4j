/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

package cim4j;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Supplier;

public final class CimClassMap {

    /**
     * Checks if the class name is known as CIM class.
     *
     * @param className The class name to check.
     * @return          Is this a CIM class?
     */
    public static boolean isCimClass(String className) {
        return CREATE_MAP.containsKey(className);
    }

    /**
     * Creates a new CIM object.
     *
     * @param className The class name of the new CIM object.
     * @return          The new CIM object.
     */
    public static BaseClass createCimObject(String className) {
        var createFunction = CREATE_MAP.get(className);
        return createFunction.get();
    }

    /**
     * Creates a new CIM object (as object of the correct class).
     *
     * @param clazz The class of the new CIM object.
     * @return      The new CIM object.
     */
    @SuppressWarnings("unchecked")
    public static <T extends BaseClass> T createCimObject(Class<T> clazz) {
        var className = clazz.getSimpleName();
        return (T) createCimObject(className);
    }

    /**
     * Map of CIM class name to supplier function which creates a new CIM object.
     */
    private static final Map<String, Supplier<BaseClass>> CREATE_MAP;
    static {
        var map = new LinkedHashMap<String, Supplier<BaseClass>>();

        map.put("ACDCConverter", () -> new ACDCConverter());
        map.put("ACDCConverterDCTerminal", () -> new ACDCConverterDCTerminal());
        map.put("ACDCTerminal", () -> new ACDCTerminal());
        map.put("ACLineSegment", () -> new ACLineSegment());
        map.put("Accumulator", () -> new Accumulator());
        map.put("AccumulatorLimit", () -> new AccumulatorLimit());
        map.put("AccumulatorLimitSet", () -> new AccumulatorLimitSet());
        map.put("AccumulatorReset", () -> new AccumulatorReset());
        map.put("AccumulatorValue", () -> new AccumulatorValue());
        map.put("ActivePowerLimit", () -> new ActivePowerLimit());
        map.put("Analog", () -> new Analog());
        map.put("AnalogControl", () -> new AnalogControl());
        map.put("AnalogLimit", () -> new AnalogLimit());
        map.put("AnalogLimitSet", () -> new AnalogLimitSet());
        map.put("AnalogValue", () -> new AnalogValue());
        map.put("ApparentPowerLimit", () -> new ApparentPowerLimit());
        map.put("AsynchronousMachine", () -> new AsynchronousMachine());
        map.put("AsynchronousMachineDynamics", () -> new AsynchronousMachineDynamics());
        map.put("AsynchronousMachineEquivalentCircuit", () -> new AsynchronousMachineEquivalentCircuit());
        map.put("AsynchronousMachineTimeConstantReactance", () -> new AsynchronousMachineTimeConstantReactance());
        map.put("AsynchronousMachineUserDefined", () -> new AsynchronousMachineUserDefined());
        map.put("AuxiliaryEquipment", () -> new AuxiliaryEquipment());
        map.put("BaseVoltage", () -> new BaseVoltage());
        map.put("BasicIntervalSchedule", () -> new BasicIntervalSchedule());
        map.put("BatteryUnit", () -> new BatteryUnit());
        map.put("Bay", () -> new Bay());
        map.put("BoundaryPoint", () -> new BoundaryPoint());
        map.put("Breaker", () -> new Breaker());
        map.put("BusNameMarker", () -> new BusNameMarker());
        map.put("BusbarSection", () -> new BusbarSection());
        map.put("CAESPlant", () -> new CAESPlant());
        map.put("CSCDynamics", () -> new CSCDynamics());
        map.put("CSCUserDefined", () -> new CSCUserDefined());
        map.put("Clamp", () -> new Clamp());
        map.put("CogenerationPlant", () -> new CogenerationPlant());
        map.put("CombinedCyclePlant", () -> new CombinedCyclePlant());
        map.put("Command", () -> new Command());
        map.put("ConductingEquipment", () -> new ConductingEquipment());
        map.put("Conductor", () -> new Conductor());
        map.put("ConformLoad", () -> new ConformLoad());
        map.put("ConformLoadGroup", () -> new ConformLoadGroup());
        map.put("ConformLoadSchedule", () -> new ConformLoadSchedule());
        map.put("ConnectivityNode", () -> new ConnectivityNode());
        map.put("ConnectivityNodeContainer", () -> new ConnectivityNodeContainer());
        map.put("Connector", () -> new Connector());
        map.put("Control", () -> new Control());
        map.put("ControlArea", () -> new ControlArea());
        map.put("ControlAreaGeneratingUnit", () -> new ControlAreaGeneratingUnit());
        map.put("CoordinateSystem", () -> new CoordinateSystem());
        map.put("CrossCompoundTurbineGovernorDynamics", () -> new CrossCompoundTurbineGovernorDynamics());
        map.put("CsConverter", () -> new CsConverter());
        map.put("CurrentLimit", () -> new CurrentLimit());
        map.put("CurrentTransformer", () -> new CurrentTransformer());
        map.put("Curve", () -> new Curve());
        map.put("CurveData", () -> new CurveData());
        map.put("Cut", () -> new Cut());
        map.put("DCBaseTerminal", () -> new DCBaseTerminal());
        map.put("DCBreaker", () -> new DCBreaker());
        map.put("DCBusbar", () -> new DCBusbar());
        map.put("DCChopper", () -> new DCChopper());
        map.put("DCConductingEquipment", () -> new DCConductingEquipment());
        map.put("DCConverterUnit", () -> new DCConverterUnit());
        map.put("DCDisconnector", () -> new DCDisconnector());
        map.put("DCEquipmentContainer", () -> new DCEquipmentContainer());
        map.put("DCGround", () -> new DCGround());
        map.put("DCLine", () -> new DCLine());
        map.put("DCLineSegment", () -> new DCLineSegment());
        map.put("DCNode", () -> new DCNode());
        map.put("DCSeriesDevice", () -> new DCSeriesDevice());
        map.put("DCShunt", () -> new DCShunt());
        map.put("DCSwitch", () -> new DCSwitch());
        map.put("DCTerminal", () -> new DCTerminal());
        map.put("DCTopologicalIsland", () -> new DCTopologicalIsland());
        map.put("DCTopologicalNode", () -> new DCTopologicalNode());
        map.put("DayType", () -> new DayType());
        map.put("Diagram", () -> new Diagram());
        map.put("DiagramObject", () -> new DiagramObject());
        map.put("DiagramObjectGluePoint", () -> new DiagramObjectGluePoint());
        map.put("DiagramObjectPoint", () -> new DiagramObjectPoint());
        map.put("DiagramObjectStyle", () -> new DiagramObjectStyle());
        map.put("DiagramStyle", () -> new DiagramStyle());
        map.put("DiscExcContIEEEDEC1A", () -> new DiscExcContIEEEDEC1A());
        map.put("DiscExcContIEEEDEC2A", () -> new DiscExcContIEEEDEC2A());
        map.put("DiscExcContIEEEDEC3A", () -> new DiscExcContIEEEDEC3A());
        map.put("DisconnectingCircuitBreaker", () -> new DisconnectingCircuitBreaker());
        map.put("Disconnector", () -> new Disconnector());
        map.put("DiscontinuousExcitationControlDynamics", () -> new DiscontinuousExcitationControlDynamics());
        map.put("DiscontinuousExcitationControlUserDefined", () -> new DiscontinuousExcitationControlUserDefined());
        map.put("Discrete", () -> new Discrete());
        map.put("DiscreteValue", () -> new DiscreteValue());
        map.put("DynamicsFunctionBlock", () -> new DynamicsFunctionBlock());
        map.put("EarthFaultCompensator", () -> new EarthFaultCompensator());
        map.put("EnergyArea", () -> new EnergyArea());
        map.put("EnergyConnection", () -> new EnergyConnection());
        map.put("EnergyConsumer", () -> new EnergyConsumer());
        map.put("EnergySchedulingType", () -> new EnergySchedulingType());
        map.put("EnergySource", () -> new EnergySource());
        map.put("Equipment", () -> new Equipment());
        map.put("EquipmentContainer", () -> new EquipmentContainer());
        map.put("EquivalentBranch", () -> new EquivalentBranch());
        map.put("EquivalentEquipment", () -> new EquivalentEquipment());
        map.put("EquivalentInjection", () -> new EquivalentInjection());
        map.put("EquivalentNetwork", () -> new EquivalentNetwork());
        map.put("EquivalentShunt", () -> new EquivalentShunt());
        map.put("ExcAC1A", () -> new ExcAC1A());
        map.put("ExcAC2A", () -> new ExcAC2A());
        map.put("ExcAC3A", () -> new ExcAC3A());
        map.put("ExcAC4A", () -> new ExcAC4A());
        map.put("ExcAC5A", () -> new ExcAC5A());
        map.put("ExcAC6A", () -> new ExcAC6A());
        map.put("ExcAC8B", () -> new ExcAC8B());
        map.put("ExcANS", () -> new ExcANS());
        map.put("ExcAVR1", () -> new ExcAVR1());
        map.put("ExcAVR2", () -> new ExcAVR2());
        map.put("ExcAVR3", () -> new ExcAVR3());
        map.put("ExcAVR4", () -> new ExcAVR4());
        map.put("ExcAVR5", () -> new ExcAVR5());
        map.put("ExcAVR7", () -> new ExcAVR7());
        map.put("ExcBBC", () -> new ExcBBC());
        map.put("ExcCZ", () -> new ExcCZ());
        map.put("ExcDC1A", () -> new ExcDC1A());
        map.put("ExcDC2A", () -> new ExcDC2A());
        map.put("ExcDC3A", () -> new ExcDC3A());
        map.put("ExcDC3A1", () -> new ExcDC3A1());
        map.put("ExcELIN1", () -> new ExcELIN1());
        map.put("ExcELIN2", () -> new ExcELIN2());
        map.put("ExcHU", () -> new ExcHU());
        map.put("ExcIEEEAC1A", () -> new ExcIEEEAC1A());
        map.put("ExcIEEEAC2A", () -> new ExcIEEEAC2A());
        map.put("ExcIEEEAC3A", () -> new ExcIEEEAC3A());
        map.put("ExcIEEEAC4A", () -> new ExcIEEEAC4A());
        map.put("ExcIEEEAC5A", () -> new ExcIEEEAC5A());
        map.put("ExcIEEEAC6A", () -> new ExcIEEEAC6A());
        map.put("ExcIEEEAC7B", () -> new ExcIEEEAC7B());
        map.put("ExcIEEEAC8B", () -> new ExcIEEEAC8B());
        map.put("ExcIEEEDC1A", () -> new ExcIEEEDC1A());
        map.put("ExcIEEEDC2A", () -> new ExcIEEEDC2A());
        map.put("ExcIEEEDC3A", () -> new ExcIEEEDC3A());
        map.put("ExcIEEEDC4B", () -> new ExcIEEEDC4B());
        map.put("ExcIEEEST1A", () -> new ExcIEEEST1A());
        map.put("ExcIEEEST2A", () -> new ExcIEEEST2A());
        map.put("ExcIEEEST3A", () -> new ExcIEEEST3A());
        map.put("ExcIEEEST4B", () -> new ExcIEEEST4B());
        map.put("ExcIEEEST5B", () -> new ExcIEEEST5B());
        map.put("ExcIEEEST6B", () -> new ExcIEEEST6B());
        map.put("ExcIEEEST7B", () -> new ExcIEEEST7B());
        map.put("ExcNI", () -> new ExcNI());
        map.put("ExcOEX3T", () -> new ExcOEX3T());
        map.put("ExcPIC", () -> new ExcPIC());
        map.put("ExcREXS", () -> new ExcREXS());
        map.put("ExcRQB", () -> new ExcRQB());
        map.put("ExcSCRX", () -> new ExcSCRX());
        map.put("ExcSEXS", () -> new ExcSEXS());
        map.put("ExcSK", () -> new ExcSK());
        map.put("ExcST1A", () -> new ExcST1A());
        map.put("ExcST2A", () -> new ExcST2A());
        map.put("ExcST3A", () -> new ExcST3A());
        map.put("ExcST4B", () -> new ExcST4B());
        map.put("ExcST6B", () -> new ExcST6B());
        map.put("ExcST7B", () -> new ExcST7B());
        map.put("ExcitationSystemDynamics", () -> new ExcitationSystemDynamics());
        map.put("ExcitationSystemUserDefined", () -> new ExcitationSystemUserDefined());
        map.put("ExternalNetworkInjection", () -> new ExternalNetworkInjection());
        map.put("FaultIndicator", () -> new FaultIndicator());
        map.put("FossilFuel", () -> new FossilFuel());
        map.put("Fuse", () -> new Fuse());
        map.put("GenICompensationForGenJ", () -> new GenICompensationForGenJ());
        map.put("GeneratingUnit", () -> new GeneratingUnit());
        map.put("GeographicalRegion", () -> new GeographicalRegion());
        map.put("GovCT1", () -> new GovCT1());
        map.put("GovCT2", () -> new GovCT2());
        map.put("GovGAST", () -> new GovGAST());
        map.put("GovGAST1", () -> new GovGAST1());
        map.put("GovGAST2", () -> new GovGAST2());
        map.put("GovGAST3", () -> new GovGAST3());
        map.put("GovGAST4", () -> new GovGAST4());
        map.put("GovGASTWD", () -> new GovGASTWD());
        map.put("GovHydro1", () -> new GovHydro1());
        map.put("GovHydro2", () -> new GovHydro2());
        map.put("GovHydro3", () -> new GovHydro3());
        map.put("GovHydro4", () -> new GovHydro4());
        map.put("GovHydroDD", () -> new GovHydroDD());
        map.put("GovHydroFrancis", () -> new GovHydroFrancis());
        map.put("GovHydroIEEE0", () -> new GovHydroIEEE0());
        map.put("GovHydroIEEE2", () -> new GovHydroIEEE2());
        map.put("GovHydroPID", () -> new GovHydroPID());
        map.put("GovHydroPID2", () -> new GovHydroPID2());
        map.put("GovHydroPelton", () -> new GovHydroPelton());
        map.put("GovHydroR", () -> new GovHydroR());
        map.put("GovHydroWEH", () -> new GovHydroWEH());
        map.put("GovHydroWPID", () -> new GovHydroWPID());
        map.put("GovSteam0", () -> new GovSteam0());
        map.put("GovSteam1", () -> new GovSteam1());
        map.put("GovSteam2", () -> new GovSteam2());
        map.put("GovSteamBB", () -> new GovSteamBB());
        map.put("GovSteamCC", () -> new GovSteamCC());
        map.put("GovSteamEU", () -> new GovSteamEU());
        map.put("GovSteamFV2", () -> new GovSteamFV2());
        map.put("GovSteamFV3", () -> new GovSteamFV3());
        map.put("GovSteamFV4", () -> new GovSteamFV4());
        map.put("GovSteamIEEE1", () -> new GovSteamIEEE1());
        map.put("GovSteamSGO", () -> new GovSteamSGO());
        map.put("GrossToNetActivePowerCurve", () -> new GrossToNetActivePowerCurve());
        map.put("Ground", () -> new Ground());
        map.put("GroundDisconnector", () -> new GroundDisconnector());
        map.put("GroundingImpedance", () -> new GroundingImpedance());
        map.put("HVDCDynamics", () -> new HVDCDynamics());
        map.put("HydroGeneratingUnit", () -> new HydroGeneratingUnit());
        map.put("HydroPowerPlant", () -> new HydroPowerPlant());
        map.put("HydroPump", () -> new HydroPump());
        map.put("IOPoint", () -> new IOPoint());
        map.put("IdentifiedObject", () -> new IdentifiedObject());
        map.put("Jumper", () -> new Jumper());
        map.put("Junction", () -> new Junction());
        map.put("Limit", () -> new Limit());
        map.put("LimitSet", () -> new LimitSet());
        map.put("Line", () -> new Line());
        map.put("LinearShuntCompensator", () -> new LinearShuntCompensator());
        map.put("LoadAggregate", () -> new LoadAggregate());
        map.put("LoadArea", () -> new LoadArea());
        map.put("LoadBreakSwitch", () -> new LoadBreakSwitch());
        map.put("LoadComposite", () -> new LoadComposite());
        map.put("LoadDynamics", () -> new LoadDynamics());
        map.put("LoadGenericNonLinear", () -> new LoadGenericNonLinear());
        map.put("LoadGroup", () -> new LoadGroup());
        map.put("LoadMotor", () -> new LoadMotor());
        map.put("LoadResponseCharacteristic", () -> new LoadResponseCharacteristic());
        map.put("LoadStatic", () -> new LoadStatic());
        map.put("LoadUserDefined", () -> new LoadUserDefined());
        map.put("Location", () -> new Location());
        map.put("Measurement", () -> new Measurement());
        map.put("MeasurementValue", () -> new MeasurementValue());
        map.put("MeasurementValueQuality", () -> new MeasurementValueQuality());
        map.put("MeasurementValueSource", () -> new MeasurementValueSource());
        map.put("MechLoad1", () -> new MechLoad1());
        map.put("MechanicalLoadDynamics", () -> new MechanicalLoadDynamics());
        map.put("MechanicalLoadUserDefined", () -> new MechanicalLoadUserDefined());
        map.put("MutualCoupling", () -> new MutualCoupling());
        map.put("NonConformLoad", () -> new NonConformLoad());
        map.put("NonConformLoadGroup", () -> new NonConformLoadGroup());
        map.put("NonConformLoadSchedule", () -> new NonConformLoadSchedule());
        map.put("NonlinearShuntCompensator", () -> new NonlinearShuntCompensator());
        map.put("NonlinearShuntCompensatorPoint", () -> new NonlinearShuntCompensatorPoint());
        map.put("NuclearGeneratingUnit", () -> new NuclearGeneratingUnit());
        map.put("OperationalLimit", () -> new OperationalLimit());
        map.put("OperationalLimitSet", () -> new OperationalLimitSet());
        map.put("OperationalLimitType", () -> new OperationalLimitType());
        map.put("OverexcLim2", () -> new OverexcLim2());
        map.put("OverexcLimIEEE", () -> new OverexcLimIEEE());
        map.put("OverexcLimX1", () -> new OverexcLimX1());
        map.put("OverexcLimX2", () -> new OverexcLimX2());
        map.put("OverexcitationLimiterDynamics", () -> new OverexcitationLimiterDynamics());
        map.put("OverexcitationLimiterUserDefined", () -> new OverexcitationLimiterUserDefined());
        map.put("PFVArControllerType1Dynamics", () -> new PFVArControllerType1Dynamics());
        map.put("PFVArControllerType1UserDefined", () -> new PFVArControllerType1UserDefined());
        map.put("PFVArControllerType2Dynamics", () -> new PFVArControllerType2Dynamics());
        map.put("PFVArControllerType2UserDefined", () -> new PFVArControllerType2UserDefined());
        map.put("PFVArType1IEEEPFController", () -> new PFVArType1IEEEPFController());
        map.put("PFVArType1IEEEVArController", () -> new PFVArType1IEEEVArController());
        map.put("PFVArType2Common1", () -> new PFVArType2Common1());
        map.put("PFVArType2IEEEPFController", () -> new PFVArType2IEEEPFController());
        map.put("PFVArType2IEEEVArController", () -> new PFVArType2IEEEVArController());
        map.put("PetersenCoil", () -> new PetersenCoil());
        map.put("PhaseTapChanger", () -> new PhaseTapChanger());
        map.put("PhaseTapChangerAsymmetrical", () -> new PhaseTapChangerAsymmetrical());
        map.put("PhaseTapChangerLinear", () -> new PhaseTapChangerLinear());
        map.put("PhaseTapChangerNonLinear", () -> new PhaseTapChangerNonLinear());
        map.put("PhaseTapChangerSymmetrical", () -> new PhaseTapChangerSymmetrical());
        map.put("PhaseTapChangerTable", () -> new PhaseTapChangerTable());
        map.put("PhaseTapChangerTablePoint", () -> new PhaseTapChangerTablePoint());
        map.put("PhaseTapChangerTabular", () -> new PhaseTapChangerTabular());
        map.put("PhotoVoltaicUnit", () -> new PhotoVoltaicUnit());
        map.put("PositionPoint", () -> new PositionPoint());
        map.put("PostLineSensor", () -> new PostLineSensor());
        map.put("PotentialTransformer", () -> new PotentialTransformer());
        map.put("PowerElectronicsConnection", () -> new PowerElectronicsConnection());
        map.put("PowerElectronicsUnit", () -> new PowerElectronicsUnit());
        map.put("PowerElectronicsWindUnit", () -> new PowerElectronicsWindUnit());
        map.put("PowerSystemResource", () -> new PowerSystemResource());
        map.put("PowerSystemStabilizerDynamics", () -> new PowerSystemStabilizerDynamics());
        map.put("PowerSystemStabilizerUserDefined", () -> new PowerSystemStabilizerUserDefined());
        map.put("PowerTransformer", () -> new PowerTransformer());
        map.put("PowerTransformerEnd", () -> new PowerTransformerEnd());
        map.put("ProprietaryParameterDynamics", () -> new ProprietaryParameterDynamics());
        map.put("ProtectedSwitch", () -> new ProtectedSwitch());
        map.put("Pss1", () -> new Pss1());
        map.put("Pss1A", () -> new Pss1A());
        map.put("Pss2B", () -> new Pss2B());
        map.put("Pss2ST", () -> new Pss2ST());
        map.put("Pss5", () -> new Pss5());
        map.put("PssELIN2", () -> new PssELIN2());
        map.put("PssIEEE1A", () -> new PssIEEE1A());
        map.put("PssIEEE2B", () -> new PssIEEE2B());
        map.put("PssIEEE3B", () -> new PssIEEE3B());
        map.put("PssIEEE4B", () -> new PssIEEE4B());
        map.put("PssPTIST1", () -> new PssPTIST1());
        map.put("PssPTIST3", () -> new PssPTIST3());
        map.put("PssRQB", () -> new PssRQB());
        map.put("PssSB4", () -> new PssSB4());
        map.put("PssSH", () -> new PssSH());
        map.put("PssSK", () -> new PssSK());
        map.put("PssSTAB2A", () -> new PssSTAB2A());
        map.put("PssWECC", () -> new PssWECC());
        map.put("Quality61850", () -> new Quality61850());
        map.put("RaiseLowerCommand", () -> new RaiseLowerCommand());
        map.put("RatioTapChanger", () -> new RatioTapChanger());
        map.put("RatioTapChangerTable", () -> new RatioTapChangerTable());
        map.put("RatioTapChangerTablePoint", () -> new RatioTapChangerTablePoint());
        map.put("ReactiveCapabilityCurve", () -> new ReactiveCapabilityCurve());
        map.put("RegularIntervalSchedule", () -> new RegularIntervalSchedule());
        map.put("RegularTimePoint", () -> new RegularTimePoint());
        map.put("RegulatingCondEq", () -> new RegulatingCondEq());
        map.put("RegulatingControl", () -> new RegulatingControl());
        map.put("RegulationSchedule", () -> new RegulationSchedule());
        map.put("RemoteInputSignal", () -> new RemoteInputSignal());
        map.put("ReportingGroup", () -> new ReportingGroup());
        map.put("RotatingMachine", () -> new RotatingMachine());
        map.put("RotatingMachineDynamics", () -> new RotatingMachineDynamics());
        map.put("SVCUserDefined", () -> new SVCUserDefined());
        map.put("Season", () -> new Season());
        map.put("SeasonDayTypeSchedule", () -> new SeasonDayTypeSchedule());
        map.put("Sensor", () -> new Sensor());
        map.put("SeriesCompensator", () -> new SeriesCompensator());
        map.put("ServiceLocation", () -> new ServiceLocation());
        map.put("SetPoint", () -> new SetPoint());
        map.put("ShuntCompensator", () -> new ShuntCompensator());
        map.put("SolarGeneratingUnit", () -> new SolarGeneratingUnit());
        map.put("SolarPowerPlant", () -> new SolarPowerPlant());
        map.put("StaticVarCompensator", () -> new StaticVarCompensator());
        map.put("StaticVarCompensatorDynamics", () -> new StaticVarCompensatorDynamics());
        map.put("StationSupply", () -> new StationSupply());
        map.put("Status", () -> new Status());
        map.put("StreetAddress", () -> new StreetAddress());
        map.put("StreetDetail", () -> new StreetDetail());
        map.put("StringMeasurement", () -> new StringMeasurement());
        map.put("StringMeasurementValue", () -> new StringMeasurementValue());
        map.put("SubGeographicalRegion", () -> new SubGeographicalRegion());
        map.put("SubLoadArea", () -> new SubLoadArea());
        map.put("Substation", () -> new Substation());
        map.put("SurgeArrester", () -> new SurgeArrester());
        map.put("SvInjection", () -> new SvInjection());
        map.put("SvPowerFlow", () -> new SvPowerFlow());
        map.put("SvShuntCompensatorSections", () -> new SvShuntCompensatorSections());
        map.put("SvStatus", () -> new SvStatus());
        map.put("SvSwitch", () -> new SvSwitch());
        map.put("SvTapStep", () -> new SvTapStep());
        map.put("SvVoltage", () -> new SvVoltage());
        map.put("Switch", () -> new Switch());
        map.put("SwitchSchedule", () -> new SwitchSchedule());
        map.put("SynchronousMachine", () -> new SynchronousMachine());
        map.put("SynchronousMachineDetailed", () -> new SynchronousMachineDetailed());
        map.put("SynchronousMachineDynamics", () -> new SynchronousMachineDynamics());
        map.put("SynchronousMachineEquivalentCircuit", () -> new SynchronousMachineEquivalentCircuit());
        map.put("SynchronousMachineSimplified", () -> new SynchronousMachineSimplified());
        map.put("SynchronousMachineTimeConstantReactance", () -> new SynchronousMachineTimeConstantReactance());
        map.put("SynchronousMachineUserDefined", () -> new SynchronousMachineUserDefined());
        map.put("TapChanger", () -> new TapChanger());
        map.put("TapChangerControl", () -> new TapChangerControl());
        map.put("TapChangerTablePoint", () -> new TapChangerTablePoint());
        map.put("TapSchedule", () -> new TapSchedule());
        map.put("Terminal", () -> new Terminal());
        map.put("TextDiagramObject", () -> new TextDiagramObject());
        map.put("ThermalGeneratingUnit", () -> new ThermalGeneratingUnit());
        map.put("TieFlow", () -> new TieFlow());
        map.put("TopologicalIsland", () -> new TopologicalIsland());
        map.put("TopologicalNode", () -> new TopologicalNode());
        map.put("TownDetail", () -> new TownDetail());
        map.put("TransformerEnd", () -> new TransformerEnd());
        map.put("TurbLCFB1", () -> new TurbLCFB1());
        map.put("TurbineGovernorDynamics", () -> new TurbineGovernorDynamics());
        map.put("TurbineGovernorUserDefined", () -> new TurbineGovernorUserDefined());
        map.put("TurbineLoadControllerDynamics", () -> new TurbineLoadControllerDynamics());
        map.put("TurbineLoadControllerUserDefined", () -> new TurbineLoadControllerUserDefined());
        map.put("UnderexcLim2Simplified", () -> new UnderexcLim2Simplified());
        map.put("UnderexcLimIEEE1", () -> new UnderexcLimIEEE1());
        map.put("UnderexcLimIEEE2", () -> new UnderexcLimIEEE2());
        map.put("UnderexcLimX1", () -> new UnderexcLimX1());
        map.put("UnderexcLimX2", () -> new UnderexcLimX2());
        map.put("UnderexcitationLimiterDynamics", () -> new UnderexcitationLimiterDynamics());
        map.put("UnderexcitationLimiterUserDefined", () -> new UnderexcitationLimiterUserDefined());
        map.put("VAdjIEEE", () -> new VAdjIEEE());
        map.put("VCompIEEEType1", () -> new VCompIEEEType1());
        map.put("VCompIEEEType2", () -> new VCompIEEEType2());
        map.put("VSCDynamics", () -> new VSCDynamics());
        map.put("VSCUserDefined", () -> new VSCUserDefined());
        map.put("ValueAliasSet", () -> new ValueAliasSet());
        map.put("ValueToAlias", () -> new ValueToAlias());
        map.put("VisibilityLayer", () -> new VisibilityLayer());
        map.put("VoltageAdjusterDynamics", () -> new VoltageAdjusterDynamics());
        map.put("VoltageAdjusterUserDefined", () -> new VoltageAdjusterUserDefined());
        map.put("VoltageCompensatorDynamics", () -> new VoltageCompensatorDynamics());
        map.put("VoltageCompensatorUserDefined", () -> new VoltageCompensatorUserDefined());
        map.put("VoltageLevel", () -> new VoltageLevel());
        map.put("VoltageLimit", () -> new VoltageLimit());
        map.put("VsCapabilityCurve", () -> new VsCapabilityCurve());
        map.put("VsConverter", () -> new VsConverter());
        map.put("WaveTrap", () -> new WaveTrap());
        map.put("WindAeroConstIEC", () -> new WindAeroConstIEC());
        map.put("WindAeroOneDimIEC", () -> new WindAeroOneDimIEC());
        map.put("WindAeroTwoDimIEC", () -> new WindAeroTwoDimIEC());
        map.put("WindContCurrLimIEC", () -> new WindContCurrLimIEC());
        map.put("WindContPType3IEC", () -> new WindContPType3IEC());
        map.put("WindContPType4aIEC", () -> new WindContPType4aIEC());
        map.put("WindContPType4bIEC", () -> new WindContPType4bIEC());
        map.put("WindContPitchAngleIEC", () -> new WindContPitchAngleIEC());
        map.put("WindContQIEC", () -> new WindContQIEC());
        map.put("WindContQLimIEC", () -> new WindContQLimIEC());
        map.put("WindContQPQULimIEC", () -> new WindContQPQULimIEC());
        map.put("WindContRotorRIEC", () -> new WindContRotorRIEC());
        map.put("WindDynamicsLookupTable", () -> new WindDynamicsLookupTable());
        map.put("WindGenTurbineType1aIEC", () -> new WindGenTurbineType1aIEC());
        map.put("WindGenTurbineType1bIEC", () -> new WindGenTurbineType1bIEC());
        map.put("WindGenTurbineType2IEC", () -> new WindGenTurbineType2IEC());
        map.put("WindGenType3IEC", () -> new WindGenType3IEC());
        map.put("WindGenType3aIEC", () -> new WindGenType3aIEC());
        map.put("WindGenType3bIEC", () -> new WindGenType3bIEC());
        map.put("WindGenType4IEC", () -> new WindGenType4IEC());
        map.put("WindGeneratingUnit", () -> new WindGeneratingUnit());
        map.put("WindMechIEC", () -> new WindMechIEC());
        map.put("WindPitchContPowerIEC", () -> new WindPitchContPowerIEC());
        map.put("WindPlantDynamics", () -> new WindPlantDynamics());
        map.put("WindPlantFreqPcontrolIEC", () -> new WindPlantFreqPcontrolIEC());
        map.put("WindPlantIEC", () -> new WindPlantIEC());
        map.put("WindPlantReactiveControlIEC", () -> new WindPlantReactiveControlIEC());
        map.put("WindPlantUserDefined", () -> new WindPlantUserDefined());
        map.put("WindPowerPlant", () -> new WindPowerPlant());
        map.put("WindProtectionIEC", () -> new WindProtectionIEC());
        map.put("WindRefFrameRotIEC", () -> new WindRefFrameRotIEC());
        map.put("WindTurbineType1or2Dynamics", () -> new WindTurbineType1or2Dynamics());
        map.put("WindTurbineType1or2IEC", () -> new WindTurbineType1or2IEC());
        map.put("WindTurbineType3IEC", () -> new WindTurbineType3IEC());
        map.put("WindTurbineType3or4Dynamics", () -> new WindTurbineType3or4Dynamics());
        map.put("WindTurbineType3or4IEC", () -> new WindTurbineType3or4IEC());
        map.put("WindTurbineType4IEC", () -> new WindTurbineType4IEC());
        map.put("WindTurbineType4aIEC", () -> new WindTurbineType4aIEC());
        map.put("WindTurbineType4bIEC", () -> new WindTurbineType4bIEC());
        map.put("WindType1or2UserDefined", () -> new WindType1or2UserDefined());
        map.put("WindType3or4UserDefined", () -> new WindType3or4UserDefined());
        map.put("WorkLocation", () -> new WorkLocation());

        CREATE_MAP = Collections.unmodifiableMap(map);
    }
}
